{"version":3,"sources":["components/ButtonSend.jsx","components/MessageForm.jsx","components/MessageItem.jsx","components/MessageList.jsx","App.js","serviceWorker.js","index.js"],"names":["ButtonSend","props","label","handleOnClick","Button","onClick","styled","button","MessageForm","placeholder","handleOnSuccess","messageInputField","useRef","userInputField","Input","ref","type","data","message","current","value","user","fetch","method","body","JSON","stringify","then","response","console","log","input","MessageItem","Li","username","name","li","MessageList","messages","messageArray","Object","entries","Ul","reverse","map","item","key","messageData","ul","App","useState","chatRoomData","setChatRoomData","isHidden","handleGetChatRoom","json","useEffect","Div","HeadingWrapper","Heading","animate","x","opacity","initial","transition","duration","delay","className","div","h1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.790237b2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function ButtonSend(props) {\r\n  const { label, handleOnClick } = props;\r\n  return <Button onClick={handleOnClick}>{label}</Button>;\r\n}\r\n\r\nconst Button = styled.button`\r\n  display: block;\r\n  width: 50%;\r\n  padding: 12px;\r\n  border-radius: 6px;\r\n  margin: 5px 0;\r\n  background-color: #1e90ff;\r\n  border: 2px solid #1e90ff;\r\n  font-size: 16px;\r\n\r\n  color: white;\r\n`;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport ButtonSend from \"./ButtonSend\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function MessageForm({ label, placeholder, handleOnSuccess }) {\r\n  const messageInputField = useRef();\r\n  const userInputField = useRef();\r\n\r\n  function handleOnClick() {\r\n    // console.log(messageInputField.current.value);\r\n    const message = messageInputField.current.value;\r\n    const user = userInputField.current.value;\r\n    const url =\r\n      \"https://mock-data-api.firebaseio.com/chatrooms/-MFZumveIpHH5D_gkUHJ/messages.json\";\r\n    const data = {\r\n      message: message,\r\n      user: user,\r\n    };\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n    }).then((response) => {\r\n      console.log(\"Data har skickats\");\r\n      handleOnSuccess();\r\n      messageInputField.current.value = null;\r\n      userInputField.current.value = null;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <label>{label}:</label>\r\n      <br />\r\n      <Input ref={messageInputField} type=\"text\" placeholder={placeholder} />\r\n      <br />\r\n      <label>User:</label>\r\n      <br />\r\n      <Input ref={userInputField} type=\"text\" placeholder=\"User\" />\r\n      <ButtonSend handleOnClick={handleOnClick} label=\"Send\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Input = styled.input`\r\n  width: 50%;\r\n  padding: 12px;\r\n  border: 1px solid #a0a0a0;\r\n  border-radius: 6px;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function MessageItem({ message }) {\r\n  function getMessageUser() {\r\n    if (message.user) {\r\n      return message.user;\r\n    } else if (message.username) {\r\n      return message.username;\r\n    } else if (message.name) {\r\n      return message.name;\r\n    } else {\r\n      return \"Nameless user\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Li>\r\n      {typeof message.message === \"string\" ? (\r\n        message.message\r\n      ) : (\r\n        <span>Something went wrong</span>\r\n      )}\r\n      <p>-{getMessageUser()}</p>\r\n    </Li>\r\n  );\r\n}\r\n\r\nconst Li = styled.li`\r\n  width: 50%;\r\n  border: 1px solid #C9C7C7;\r\n  padding 12px;\r\n  margin: 1px;\r\n  border-radius: 6px;\r\n  p{\r\n    margin: 0;\r\n    color: #9B9B9B;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport MessageItem from \"./MessageItem\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function MessageList({ messages }) {\r\n  const messageArray = Object.entries(messages);\r\n  return (\r\n    <Ul>\r\n      {messageArray.reverse().map((item) => {\r\n        const key = item[0];\r\n        const messageData = item[1];\r\n        // const message = messageData.message;\r\n\r\n        return <MessageItem key={key} message={messageData} />;\r\n      })}\r\n    </Ul>\r\n  );\r\n}\r\n\r\nconst Ul = styled.ul`\r\n  list-style: none;\r\n  padding: 0;\r\n`;\r\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nimport MessageForm from \"./components/MessageForm\";\nimport MessageList from \"./components/MessageList\";\nimport styled from \"styled-components\";\n\nfunction App() {\n  const [chatRoomData, setChatRoomData] = useState({});\n  const [isHidden, setIsHidden] = useState(true);\n\n  function handleGetChatRoom() {\n    const url =\n      \"https://mock-data-api.firebaseio.com/chatrooms/-MFZumveIpHH5D_gkUHJ.json\";\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        setChatRoomData(data);\n      });\n  }\n  // function animateOnClick() {\n  //   return setIsHidden(false);\n  // }\n  console.log(isHidden);\n\n  useEffect(() => {\n    handleGetChatRoom();\n  }, []);\n\n  return (\n    <Div>\n      <HeadingWrapper>\n        <Heading\n          animate={{ x: 100, opacity: 1 }}\n          initial={{ opacity: 0 }}\n          transition={{ duration: 1, delay: 1.2 }}\n        >\n          {chatRoomData.name}\n        </Heading>\n      </HeadingWrapper>\n\n      <div>\n        <MessageForm\n          handleOnSuccess={handleGetChatRoom}\n          label=\"Enter you message\"\n          placeholder=\"Ditt meddelande\"\n        />\n      </div>\n\n      <div>\n        <div className=\"col-md-12\">\n          {/* Kollar så vi har chatroomdata innan vi renderar messagelist, om vi inte har data renderas en tom sträng */}\n          {chatRoomData.messages ? (\n            <MessageList messages={chatRoomData.messages} />\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    </Div>\n  );\n}\n\nexport default App;\n\nconst Div = styled.div`\n  margin: 1rem;\n`;\nconst Heading = styled.h1`\n  cursor: pointer;\n`;\nconst HeadingWrapper = styled.div`\n  width: 100%;\n  height: ${(isHidden) => (isHidden ? \"100vh\" : \"20vh\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}